package br.com.challenge.api.controller;


import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import br.com.challenge.api.model.Historico;
import br.com.challenge.api.service.HistoricoService;

@RestController
@RequestMapping("/historicos")
public class HistoricoController {
	
	@Autowired
	private HistoricoService service;
	
	@PostMapping
	public ResponseEntity<Historico> salvar(@Valid @RequestBody Historico historico) {
		Historico historicoSalva = service.salvarHistorico(historico);
		return ResponseEntity.status(HttpStatus.CREATED).body(historicoSalva);
	}
	
	
	@GetMapping
	public List<Historico> listaHistorico() {
		return service.buscarTodoHistorico();
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Historico> buscarHistoricoPorId(@PathVariable(value = "id") Long id){
		Historico historico = service.buscarPorId(id);
		return historico != null ? ResponseEntity.ok(historico):
		ResponseEntity.notFound().build();
	}
	
	@DeleteMapping
	@ResponseStatus(HttpStatus.NO_CONTENT)
	public void removerHistoricoPorId(@PathVariable Long id) {
		service.deletarPorId(id);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Historico> editarHistorico(@PathVariable Long id, @Valid Historico historico){
		try {
			Historico historicoSalvo = service.atualizarHistorico(id, historico);
			return ResponseEntity.ok(historicoSalvo);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.notFound().build();
		}
	}

}
